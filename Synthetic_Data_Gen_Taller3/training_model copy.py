# -*- coding: utf-8 -*-
"""Phishing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Y0Sa_WwPR6-hKbSihWs4EC1SMQ0mD7g_
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

# Cargar el conjunto de datos
data = pd.read_csv("Phishing_Legitimate_full.csv")


X = data.drop(columns=['id', 'CLASS_LABEL'])
y = data['CLASS_LABEL']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Entrenar el modelo de bosque aleatorio
model = RandomForestClassifier(n_estimators=45, max_depth=3, 
                            min_samples_split=2, min_samples_leaf=1, max_features=1, random_state=42)
model.fit(X_train, y_train)


y_pred = model.predict(X_test)

print(f"Accuracy: {accuracy_score(y_test, y_pred)}")
print(confusion_matrix(y_test, y_pred))

# Matriz de confusión
cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, cmap='Blues', fmt='g', cbar=False)
plt.xlabel('Predicted labels')
plt.ylabel('True labels')
plt.show()

features = ['NumDots', 'UrlLength', 'PathLength', 'NumNumericChars', 'PctExtResourceUrls']

# Graficar para las URLs maliciosas
malicious_data = data[data['CLASS_LABEL'] == 1]
malicious_data_features = malicious_data[features]
malicious_data_features_mean = malicious_data_features.mean()

# Graficar para las URLs legítimas
legitimate_data = data[data['CLASS_LABEL'] == 0]
legitimate_data_features = legitimate_data[features]
legitimate_data_features_mean = legitimate_data_features.mean()

# Graficar
plt.figure(figsize=(10, 6))
sns.barplot(x=features, y=malicious_data_features_mean, color='red', alpha=0.6, label='Malicious URLs')
sns.barplot(x=features, y=legitimate_data_features_mean, color='blue', alpha=0.6, label='Legitimate URLs')
plt.title('Mean Values of Features for Malicious and Legitimate URLs')
plt.xlabel('Features')
plt.ylabel('Mean Value')
plt.legend()
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

class_counts = data['CLASS_LABEL'].value_counts()

# Crear el diagrama de barras
plt.figure(figsize=(8, 6))
sns.barplot(x=class_counts.index, y=class_counts.values)
plt.title('Distribución de clases')
plt.xlabel('Clase')
plt.ylabel('Cantidad de instancias')

for i, count in enumerate(class_counts):
    plt.text(i, count + 0.1, str(count), ha='center')

plt.xticks(ticks=[0, 1], labels=['Legítima', 'Maliciosa'])
plt.show()